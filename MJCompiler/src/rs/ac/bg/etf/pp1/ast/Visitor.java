// generated with ast extension for cup
// version 0.8
// 28/4/2018 21:32:59


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(Unmatched Unmatched);
    public void visit(NumList NumList);
    public void visit(VarIdent VarIdent);
    public void visit(IfStart IfStart);
    public void visit(Matched Matched);
    public void visit(FormalParamDecl FormalParamDecl);
    public void visit(ConstIdent ConstIdent);
    public void visit(WhileStart WhileStart);
    public void visit(StatementList StatementList);
    public void visit(ConstDeclSeq ConstDeclSeq);
    public void visit(ConditionTerm ConditionTerm);
    public void visit(Factor Factor);
    public void visit(Designator Designator);
    public void visit(Term Term);
    public void visit(Condition Condition);
    public void visit(ExtendsExpr ExtendsExpr);
    public void visit(ClassMethodVarDecl ClassMethodVarDecl);
    public void visit(BoolConst BoolConst);
    public void visit(ActualParamList ActualParamList);
    public void visit(IfElseStart IfElseStart);
    public void visit(Realop Realop);
    public void visit(ConditionTerms ConditionTerms);
    public void visit(MethodVarDecl MethodVarDecl);
    public void visit(ClassMethodVarDeclList ClassMethodVarDeclList);
    public void visit(VarDeclList VarDeclList);
    public void visit(FormalParamList FormalParamList);
    public void visit(Expr Expr);
    public void visit(ArrayClass ArrayClass);
    public void visit(WhileName WhileName);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(ActualPars ActualPars);
    public void visit(Decl Decl);
    public void visit(ConditionFact ConditionFact);
    public void visit(Statement Statement);
    public void visit(VarDecl VarDecl);
    public void visit(VarDeclSeq VarDeclSeq);
    public void visit(ConstDecl ConstDecl);
    public void visit(MethodDeclList MethodDeclList);
    public void visit(IfName IfName);
    public void visit(ConstType ConstType);
    public void visit(FormPars FormPars);
    public void visit(BooleanConst BooleanConst);
    public void visit(NumConst NumConst);
    public void visit(CharConst CharConst);
    public void visit(LessOrEqualOp LessOrEqualOp);
    public void visit(LessThanOp LessThanOp);
    public void visit(GreaterOrEqualOp GreaterOrEqualOp);
    public void visit(GreaterThanOp GreaterThanOp);
    public void visit(IsNotEqualOp IsNotEqualOp);
    public void visit(IsEqualOp IsEqualOp);
    public void visit(Modop Modop);
    public void visit(Divop Divop);
    public void visit(Mulop Mulop);
    public void visit(Minopp Minopp);
    public void visit(Addop Addop);
    public void visit(ClassArrayDesignator ClassArrayDesignator);
    public void visit(ClassDesignator ClassDesignator);
    public void visit(ArrayDesignator ArrayDesignator);
    public void visit(IdentDesignator IdentDesignator);
    public void visit(NewClass NewClass);
    public void visit(NewArray NewArray);
    public void visit(NewArrayClass NewArrayClass);
    public void visit(Exp Exp);
    public void visit(FuncCall FuncCall);
    public void visit(Var Var);
    public void visit(Bool Bool);
    public void visit(Char Char);
    public void visit(Const Const);
    public void visit(FactTerm FactTerm);
    public void visit(MulTerm MulTerm);
    public void visit(NegTermExpr NegTermExpr);
    public void visit(TermExpr TermExpr);
    public void visit(AddExpr AddExpr);
    public void visit(MultipleConditionFact MultipleConditionFact);
    public void visit(SingleConditionFact SingleConditionFact);
    public void visit(SingleConditionFacts SingleConditionFacts);
    public void visit(MultipleConditionFacts MultipleConditionFacts);
    public void visit(SingleConditionTerm SingleConditionTerm);
    public void visit(MultipleConditionTerms MultipleConditionTerms);
    public void visit(Conditions Conditions);
    public void visit(DesStmtError DesStmtError);
    public void visit(DesStmtFuncCall DesStmtFuncCall);
    public void visit(DesStmtExprDec DesStmtExprDec);
    public void visit(DesStmtExprInc DesStmtExprInc);
    public void visit(DesStmtExprAsign DesStmtExprAsign);
    public void visit(NoNumber NoNumber);
    public void visit(SingleNumber SingleNumber);
    public void visit(UnmatchedElse UnmatchedElse);
    public void visit(UnmatchedIf UnmatchedIf);
    public void visit(JustDo JustDo);
    public void visit(StartWhile StartWhile);
    public void visit(JustIf JustIf);
    public void visit(StartIf StartIf);
    public void visit(StartElseIf StartElseIf);
    public void visit(MatchedBlock MatchedBlock);
    public void visit(MatchedWhileStmt MatchedWhileStmt);
    public void visit(MatchedIfStmt MatchedIfStmt);
    public void visit(ReturnExprDesignStmt ReturnExprDesignStmt);
    public void visit(ReturnDesignStmt ReturnDesignStmt);
    public void visit(ContinueDesignStmt ContinueDesignStmt);
    public void visit(BreakDesignStmt BreakDesignStmt);
    public void visit(PrintDesignStmt PrintDesignStmt);
    public void visit(ReadDesignStmt ReadDesignStmt);
    public void visit(DesignStmt DesignStmt);
    public void visit(StmtUnmatched StmtUnmatched);
    public void visit(StmtMatched StmtMatched);
    public void visit(NoStmt NoStmt);
    public void visit(Statements Statements);
    public void visit(ActualParam ActualParam);
    public void visit(ActualParams ActualParams);
    public void visit(NoActuals NoActuals);
    public void visit(Actuals Actuals);
    public void visit(FormalParamDeclArray FormalParamDeclArray);
    public void visit(FormalParamDeclIdent FormalParamDeclIdent);
    public void visit(SingleFormalParamDecl SingleFormalParamDecl);
    public void visit(FormalParamDecls FormalParamDecls);
    public void visit(NoFormParam NoFormParam);
    public void visit(FormParams FormParams);
    public void visit(MethodTypeName MethodTypeName);
    public void visit(MethodDecl MethodDecl);
    public void visit(NoMethodDecl NoMethodDecl);
    public void visit(MethodDeclarations MethodDeclarations);
    public void visit(NoExtends NoExtends);
    public void visit(ExtendsExists ExtendsExists);
    public void visit(ClassMethodVarDeclDerived2 ClassMethodVarDeclDerived2);
    public void visit(ClassMethodVarDeclDerived1 ClassMethodVarDeclDerived1);
    public void visit(ClassDecl ClassDecl);
    public void visit(Type Type);
    public void visit(VarDeclError VarDeclError);
    public void visit(VarMultipleDecl VarMultipleDecl);
    public void visit(VarDeclVariable VarDeclVariable);
    public void visit(VarIdentError VarIdentError);
    public void visit(VarArrayIdent VarArrayIdent);
    public void visit(VarVariableIdent VarVariableIdent);
    public void visit(SingleVarDecl SingleVarDecl);
    public void visit(VarDeclSequence VarDeclSequence);
    public void visit(NoVarDecl NoVarDecl);
    public void visit(VarDeclarations VarDeclarations);
    public void visit(BoolFalse BoolFalse);
    public void visit(BoolTrue BoolTrue);
    public void visit(ConstIdentError ConstIdentError);
    public void visit(ConstMultipleDecl ConstMultipleDecl);
    public void visit(ConstSingleDecl ConstSingleDecl);
    public void visit(ConstDeclVar ConstDeclVar);
    public void visit(SingleConstDecl SingleConstDecl);
    public void visit(ConstDeclarationsSeq ConstDeclarationsSeq);
    public void visit(SingleClass SingleClass);
    public void visit(ClassList ClassList);
    public void visit(SingleConst SingleConst);
    public void visit(SingleVar SingleVar);
    public void visit(ConstList ConstList);
    public void visit(VarList VarList);
    public void visit(ProgName ProgName);
    public void visit(Program Program);

}
